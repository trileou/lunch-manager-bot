const { errorHandler, checkRequestLimit } = require('./src/middleware');
const {
  sendMenu,
  createVote,
  processOrder,
  getOrder,
  handleCallBack,
  sendDebt,
  getCart,
  resetData,
  createCustomMenu,
  createVoteCustom,
} = require('./src/services');
const cron = require('node-cron');
const bot = require('./src/bot');
// const { GROUP_CHAT_ID } = require('./src/constant');
const telegrafGetChatMembers = require('telegraf-getchatmembers');
// Middleware ki·ªÉm tra s·ªë l∆∞·ª£ng request

bot.use(errorHandler);
bot.use(telegrafGetChatMembers);
// test

// async function run() {
//   // Send the menu
//   await sendMenu();
//   console.log('Menu sent successfully.');

//   // Wait 10 seconds
//   await new Promise((resolve) => setTimeout(resolve, 10000));

//   // Create the vote
//   await createVote();
//   console.log('Vote created successfully.');
//   await new Promise((resolve) => setTimeout(resolve, 15000));

//   // Create the order
//   await getOrder();
//   console.log('Order created successfully.');
// }

// run();

let jobRunning = true;

cron.schedule(
  '00 10 * * 2-5',
  async () => {
    if(!jobRunning) {
      console.log('Job is paused.'); // C√¥ng vi·ªác ƒë√£ d·ª´ng, kh√¥ng th·ª±c hi·ªán g√¨
      return;
    }
    // Send the menu
    await sendMenu();
    console.log('Menu sent successfully.');

    // Wait 10 seconds
    await new Promise((resolve) => setTimeout(resolve, 5000));

    // Create the vote
    await createVote();
    console.log('Vote created successfully.');
  },
  {
    scheduled: true,
    timezone: 'Asia/Ho_Chi_Minh', // ƒê·∫∑t m√∫i gi·ªù cho cron
  }
);

cron.schedule(
  '0 18 * * *',
  async () => {
    // T·∫°o n√∫t h·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ƒë·∫∑t m√≥n kh√¥ng
    await resetData();
    console.log('reset successfully.');
  },
  {
    scheduled: true,
    timezone: 'Asia/Ho_Chi_Minh', // ƒê·∫∑t m√∫i gi·ªù cho cron
  }
);

 // ƒê·∫∑t gi·ªù g·ª≠i menu v√† t·∫°o vote
 cron.schedule(
  '0 16 * * 2-5',
  async () => {
    // Send the menu
    await sendDebt();
    console.log('send debt successfully.');
  },
  {
    scheduled: true,
    timezone: 'Asia/Ho_Chi_Minh', // ƒê·∫∑t m√∫i gi·ªù cho cron
  }
);

bot.command('list', (ctx) => {
  const message =
    '<b>Danh s√°ch c√°c l·ªánh</b>\n' +
    '/menu: l·∫•y menu c·ªßa qu√°n h√¥m nay\n' +
    '/vote: t·∫°o vote th·ªß c√¥ng ƒë·ªÉ ƒë·∫∑t m√≥n\n' +
    '/check: check th√¥ng tin c√°c m√≥n user ƒë√£ ƒë·∫∑t\n' +
    '/cart: check th√¥ng tin c√°c m√≥n ƒë√£ ƒë·∫∑t\n' +
    '/order: t·∫°o ƒë∆°n h√†ng (t√≠nh nƒÉng ch∆∞a ·ªïn ƒë·ªãnh)\n' +
    '/info: th√¥ng tin c·ªßa qu√°n, th√¥ng tin chuy·ªÉn kho·∫£n...';

  ctx.reply(message, { parse_mode: 'HTML' });
});

bot.command('info', (ctx) => {
  const message =
    '<b>Th√¥ng tin thanh to√°n üí∞: </b>\n' +
    '- <b>momo c·ªßa ch·ªß qu√°n</b>: 0902504708 - Nguy·ªÖn Th·ªã Tuy·∫øt Mai\n' +
    '- <b>momo c·ªßa Chang Lee</b> 056 330 5629\n';
  ctx.reply(message, { parse_mode: 'HTML' });
  ctx.replyWithPhoto({ source: 'public/img/qr.jpg' });
});

// L·∫Øng nghe s·ª± ki·ªán khi user ch·ªçn m·ªôt l·ª±a ch·ªçn
bot.on('callback_query', async (ctx) => {
  await handleCallBack(ctx);
});

// L·∫•y danh s√°ch m√≥n ƒÉn v√† g·ª≠i pool vote cho group chat
bot.command('vote', async (ctx) => {
  await createVote(ctx);
});

bot.command('order', async () => {
  await processOrder();
});

bot.command('check', async () => {
  await getOrder();
});

bot.command('cart', async () => {
  await getCart();
});

// X·ª≠ l√Ω l·ªánh /menu
bot.command('menu', async (ctx) => {
  await sendMenu(ctx);
});

// L·ªánh ƒë·ªÉ d·ª´ng c√¥ng vi·ªác
bot.command('stop', (ctx) => {
  jobRunning = false; // ƒê·∫∑t tr·∫°ng th√°i c√¥ng vi·ªác th√†nh d·ª´ng
  ctx.reply('ƒê√£ ng∆∞ng ƒë·∫∑t c∆°m t·ª± ƒë·ªông v√†o l√∫c 10:00 h√¥m nay! \n N·∫øu mu·ªën ƒë·∫∑t link shoppeeFood vui l√≤ng g√µ /create_menu!');
});



//create menu link
let menuLink = null; // Bi·∫øn ƒë·ªÉ l∆∞u link menu, kh·ªüi ƒë·∫ßu l√† null

// L·ªánh ƒë·ªÉ x·ª≠ l√Ω t·∫°o menu
// bot.command('create_menu', async (ctx) => {
//   const userMessage = ctx.message.text;

//   // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ cung c·∫•p li√™n k·∫øt sau l·ªánh /create_menu
//   if (userMessage.split(' ').length > 1) {
//     menuLink = userMessage.split(' ')[1]; // L·∫•y li√™n k·∫øt t·ª´ th√¥ng ƒëi·ªáp
//     await createCustomMenu(menuLink);
//     await createVoteCustom(menuLink);
//     // ctx.reply('Menu has been created successfully.');
//   } else {
//     if (!menuLink) {
//       await ctx.reply('Please enter the link for the menu.');
//       menuLink = true; // ƒê·∫∑t tr·∫°ng th√°i ƒëang ch·ªù nh·∫≠p link
//     } else {
//       // ƒê√£ c√≥ link r·ªìi, th·ª±c hi·ªán t·∫°o menu t·ª´ menuLink
//       await createCustomMenu(menuLink);
//       await createVoteCustom(menuLink);

//       // ctx.reply('Menu has been created successfully.');
//       menuLink = null; // ƒê·∫∑t l·∫°i tr·∫°ng th√°i ƒë·ªÉ y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p link l·∫ßn sau
//     }
//   }
// });

// // S·ª± ki·ªán l·∫Øng nghe tin nh·∫Øn ng∆∞·ªùi d√πng
// bot.on('text', async (ctx) => {
//   menuLink = ctx.message.text;
//   if(!menuLink || menuLink.length == 0) {
//     ctx.reply("Vui l√≤ng nh·∫≠p link shopeefood ƒë√∫ng ƒë·ªãnh d·∫°ng!");
//     return;
//   }

//   if (menuLink) {
//     // L∆∞u link m√† ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p
//     await createCustomMenu(menuLink);
//     // ctx.reply('Menu has been created successfully.');
//     menuLink = null; // ƒê·∫∑t l·∫°i tr·∫°ng th√°i ƒë·ªÉ y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p link l·∫ßn sau
//   }
// });





// bot.command('sendall', async (ctx) => {
//     const chatId = GROUP_CHAT_ID;
//     const membersCount = await ctx.telegram.getChatMembersCount(chatId);
//     for (let i = 0; i < membersCount; i++) {
//       const member = telegrafGetChatMembers.check(ctx.chat.id)  //[Members]
//       const memberId = member.user.id;
//       const message = 'Hello, world!'; // Thay b·∫±ng n·ªôi dung tin nh·∫Øn c·ªßa b·∫°n
//       await ctx.telegram.sendMessage(memberId, message);
//     }

//     ctx.reply('Message sent to all members in the group!');
//   });

bot.launch().then(console.log('bot start'));
